--- a/src/libsds/external/csiphash/csiphash.c
+++ b/src/libsds/external/csiphash/csiphash.c
@@ -38,6 +38,26 @@
 #include <sys/endian.h>
 #elif defined(HAVE_ENDIAN_H)
 #include <endian.h>
+#elif defined(SOLARIS)
+#  if defined(__sparc)
+#   include <sys/byteorder.h>
+#   include <strings.h>
+#   define htobe16(x) BE_16(x)
+#   define htole16(x) LE_16(x)
+#   define be16toh(x) BE_IN16(x)
+#   define le16toh(x) LE_IN16(x)
+#   define htobe32(x) BE_32(x)
+#   define htole32(x) LE_32(x)
+#   define be32toh(x) BE_IN32(x)
+#   define le32toh(x) LE_IN32(x)
+#   define htobe64(x) BE_64(x)
+#   define htole64(x) LE_64(x)
+#   define be64toh(x) BE_IN64(x)
+#   define le64toh(x) LE_64(x)
+#  elif defined(__i386) || defined(__amd64) 
+#    define __LITTLE_ENDIAN	1234
+#    define __BYTE_ORDER __LITTLE_ENDIAN
+#  endif
 #else
 #error platform header for endian detection not found.
 #endif
@@ -75,7 +90,13 @@
 uint64_t
 sds_siphash13(const void *src, size_t src_sz, const char key[16])
 {
+#if defined(__sparc)
+    uint64_t _key[2];
+    bcopy(key, _key, 16);
+#else
     const uint64_t *_key = (uint64_t *)key;
+#endif
+    
     uint64_t k0 = _le64toh(_key[0]);
     uint64_t k1 = _le64toh(_key[1]);
     uint64_t b = (uint64_t)src_sz << 56;
diff --git a/src/libsds/external/csiphash/csiphash.c b/src/libsds/external/csiphash/csiphash.c
index 05246fb..c86a61b 100644
--- a/src/libsds/external/csiphash/csiphash.c
+++ b/src/libsds/external/csiphash/csiphash.c
@@ -42,6 +42,7 @@
 #  if defined(__sparc)
 #   include <sys/byteorder.h>
 #   include <strings.h>
+#   include <stdlib.h>
 #   define htobe16(x) BE_16(x)
 #   define htole16(x) LE_16(x)
 #   define be16toh(x) BE_IN16(x)
@@ -97,15 +98,18 @@ sds_siphash13(const void *src, size_t src_sz, const char key[16])
 {
 #if defined(__sparc)
     uint64_t _key[2];
+    uint64_t *inbuf = (uint64_t*) malloc(src_sz);
     bcopy(key, _key, 16);
+    bcopy(src, inbuf, src_sz);
+    uint64_t *in = inbuf;
 #else
     const uint64_t *_key = (uint64_t *)key;
+    const uint64_t *in = (uint64_t *)src;
 #endif
     
     uint64_t k0 = _le64toh(_key[0]);
     uint64_t k1 = _le64toh(_key[1]);
     uint64_t b = (uint64_t)src_sz << 56;
-    const uint64_t *in = (uint64_t *)src;
 
     uint64_t v0 = k0 ^ 0x736f6d6570736575ULL;
     uint64_t v1 = k1 ^ 0x646f72616e646f6dULL;
@@ -152,5 +156,8 @@ sds_siphash13(const void *src, size_t src_sz, const char key[16])
     v2 ^= 0xff;
     // dround
     dROUND(v0, v1, v2, v3);
+#if defined(__sparc)    
+    free(inbuf);
+#endif
     return (v0 ^ v1) ^ (v2 ^ v3);
 }
